{"version":3,"sources":["components/infoform/InfoForm.js","pages/HomePage.js","components/customnavbar/CustomNavbar.js","pages/LearnPage.js","App.js","serviceWorker.js","index.js"],"names":["InfoForm","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleNameChange","sendToFirebase","state","value","name","buttonDisabled","length","e","setState","target","database","ref","set","message","alert","react_default","a","createElement","Form","FormGroup","controlId","validationState","getNameValidationState","ControlLabel","FormControl","type","placeholder","onChange","getValidationState","Button","onClick","disabled","Component","HomePage","messages","_this2","on","snapshot","students","val","messageArray","values","map","item","index","ListGroupItem","key","Grid","PageHeader","InfoForm_InfoForm","style","paddingTop","Panel","Heading","Title","componentClass","Body","ListGroup","renderCurrentMessages","CustomNavbar","Navbar","default","collapseOnSelect","display","flexDirection","Header","Brand","Link","to","Toggle","Collapse","Nav","pullRight","NavItem","eventKey","href","Jumbotron","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","firebase","defaultDatabase","HashRouter","CustomNavbar_CustomNavbar","Route","exact","path","render","HomePage_HomePage","component","LearnPage","Boolean","window","location","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86a89da8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FormGroup, ControlLabel, FormControl, Button, Form } from 'react-bootstrap';\n\nexport default class InfoForm extends Component {\n    constructor(props, context) {\n        super(props, context);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.sendToFirebase = this.sendToFirebase.bind(this);\n        this.state = {\n            value: '',\n            name: '',\n            buttonDisabled: false,\n        };\n    }\n\n    getValidationState() {\n        const length = this.state.value.length;\n        if (length > 0) return 'success';\n        return null;\n    }\n\n    getNameValidationState() {\n        const length = this.state.name.length;\n        if (length > 0) return 'success';\n        return null;\n    }\n\n    handleChange(e) {\n        this.setState({ value: e.target.value });\n    }\n\n    handleNameChange(e) {\n        this.setState({ name: e.target.value })\n    }\n\n    sendToFirebase() {\n        if(this.state.value.length > 0 && this.state.name.length > 0) {\n            this.props.database.ref('students/' + this.state.name).set({\n                message: this.state.value,\n            });\n            this.setState({buttonDisabled: true});\n            alert('Thank you for your submission, ' + this.state.name + '!');\n        } else {\n            alert('Please enter an input.')\n        }\n    }\n\n    render() {\n        return (\n            <Form>\n                <FormGroup controlId=\"formInlineName\" validationState={this.getNameValidationState()} >\n                    <ControlLabel>Name</ControlLabel>{' '}\n                    <FormControl\n                        type=\"text\"\n                        value={this.state.name}\n                        placeholder=\"Name\"\n                        onChange={this.handleNameChange}\n                    />\n                </FormGroup>{' '}\n                <FormGroup controlId=\"formInlineEmail\" validationState={this.getValidationState()}>\n                    <ControlLabel>Message</ControlLabel>{' '}\n                    <FormControl\n                        type=\"text\"\n                        value={this.state.value}\n                        placeholder='Write a short message'\n                        onChange={this.handleChange}\n                    />\n                </FormGroup>{' '}\n                <Button type=\"button\" onClick={this.sendToFirebase} disabled={this.state.buttonDisabled}>Submit</Button>\n            </Form>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Grid, PageHeader, ListGroup, ListGroupItem, Panel } from 'react-bootstrap';\nimport InfoForm from '../components/infoform/InfoForm';\n\nexport default class HomePage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            messages: [],\n        };\n    }\n\n    componentDidMount() {\n        let ref = this.props.database.ref();\n        ref.on('value', snapshot => {\n            let students = snapshot.val();\n            let messageArray = Object.values(students.students);\n            this.setState({ messages: messageArray });\n        });\n    }\n\n    renderCurrentMessages() {\n        return (\n            this.state.messages.map((item, index) => (\n                <ListGroupItem key={index}>{item.message}</ListGroupItem>\n            ))\n        );\n    }\n\n    render() {\n        return (\n            <Grid>\n                <PageHeader>Family Planning: Planning for the Future</PageHeader>\n                <InfoForm database={this.props.database}/>\n                <div style={{ paddingTop: 15 }}>\n                    <div>\n                        <Panel>\n                            <Panel.Heading>\n                                <Panel.Title componentClass=\"h3\">What the people have to say</Panel.Title>\n                            </Panel.Heading>\n                            <Panel.Body>\n                                <ListGroup>\n                                    {this.renderCurrentMessages()}\n                                </ListGroup>\n                            </Panel.Body>\n                        </Panel>\n                    </div>\n                </div>\n            </Grid>\n        );\n    }\n}\n","import React, { Component } from 'react'\nimport { Navbar, Nav, NavItem } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nexport default class CustomNavbar extends Component {\n    render() {\n        return (\n            <Navbar default collapseOnSelect>\n                <div style={{display:\"flex\", flexDirection:\"row\"}}>\n                    <Navbar.Header>\n                        <Navbar.Brand>\n                            <Link to=\"/\"></Link>\n                        </Navbar.Brand>\n                        <Navbar.Toggle />\n                    </Navbar.Header>\n                    <Navbar.Collapse>\n                        <Nav pullRight style={{display:\"flex\", flexDirection:\"row\"}}>\n                            <NavItem eventKey={1} componentClass={Link} href=\"/\" to=\"/\">Home</NavItem>\n                            <NavItem eventKey={2} componentClass={Link} href=\"/learn\" to=\"/learn\">Learn More</NavItem>\n                        </Nav>\n                    </Navbar.Collapse>\n                </div>\n            </Navbar>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Grid, Jumbotron, ListGroup, ListGroupItem } from 'react-bootstrap';\n\nexport default class HomePage extends Component {\n    render() {\n        return (\n            <Grid>\n                <Jumbotron>\n                    <h1>What We Can Do</h1>\n                    <p>\n                        Family planning stagnates population growth, prevents pregnancy-related health risks, reduces infant mortality rate, helps prevents HIV/AIDS, provides contraception, and more.\n                        The efforts to promote family planning around the world is simple!\n                        It can range from simply filling out the form to joining an organization.\n                        Below is a list, but not limited to, of actions that we can take.\n                    </p>\n                </Jumbotron>\n                <ListGroup>\n                    <ListGroupItem href='https://www.sos.arkansas.gov/uploads/elections/2018ElectionCalendar.pdf'>\n                        Vote at elections.  Your voice is strong, but a unified voice is even stronger.\n                    </ListGroupItem>\n\n                    <ListGroupItem href='https://secure2.convio.net/pf/site/Donation2?df_id=7062&mfc_pref=T&7062.donation=form1'>\n                        Donate to family planning services around the globe.\n                    </ListGroupItem>\n\n                    <ListGroupItem href='http://iyafp.org/'>\n                        Join the International Youth Alliance for Family Planning.\n                    </ListGroupItem>\n\n                    <ListGroupItem>\n                        Simply spread the word.\n                    </ListGroupItem>\n                </ListGroup>\n            </Grid>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport HomePage from './pages/HomePage';\nimport * as firebase from 'firebase';\nimport { HashRouter, Route} from 'react-router-dom';\nimport CustomNavbar from './components/customnavbar/CustomNavbar';\nimport LearnPage from './pages/LearnPage';\n\nconst config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n};\n\nexport default class App extends Component {\n    constructor() {\n        super();\n        if (!firebase.apps.length) {\n            firebase.initializeApp(config);\n        }\n        this.defaultDatabase = firebase.database();\n    }\n\n    render() {\n        return (\n          <HashRouter>\n              <div>\n                  <CustomNavbar/>\n                  <Route exact path='/' render={()=>(<HomePage database={this.defaultDatabase}/>)} />\n                  <Route exact path='/learn' component={ LearnPage } />\n              </div>\n          </HashRouter>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}